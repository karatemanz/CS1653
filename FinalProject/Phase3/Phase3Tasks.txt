T1: Unauthorized Token Issuance
- require password creation/confirmation
-- Group Server, when first launched without a UserList.bin file, needs to
   prompt for password when creating first user/admin ***DONE
-- prompt for password when logging in ***DONE
-- will need to change User/UserList class to store hashed password ***DONE
-- will need to store hashed password, part of User class? ***DONE
-- set up secure exchange between client and Group Server ***DONE - need to
   check for correctness
-- save Group Server's public key for client (local to them), store also
   for Group Server ***DONE
-- should we limit the number of characters possible for a password, or
   restrict which characters? ***currently a min. of any three characters

T2: Token Modification/Forgery
- change Token class to store signature, provide tokenized stringv ***DONE
- set up secure exchange between client and File Server to pass information
- set up File Server to decrypt signature (how will it get Group Server public
  key?) ***DONE
- set up client to accept ACK, continue on with transaction
- authorize token at every transaction
-- on File Server ***DONE
-- on Group Server

T3: Unauthorized File Servers
- have client get and store public key from File Server when first contacting
  ***DONE
- set up secure exchange between client and File Server to pass information
- if File Server can decrypt message encrypted with the public key, then use
  the shared secret key to access File Server operations
- will need to encrypt the file transfer process - CHUNK appears to be defined
  in FileThread (download) / FileClient (upload) - 4096 bytes?

T4: Information Leakage via Passive Monitoring
- use the same methods as we used in T1 - T3 to encrypt communication, ya dummy

Notes:
- maybe to do later - add PW change to GroupClientUI - no time right now (?)
